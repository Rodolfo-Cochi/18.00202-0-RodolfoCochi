Aula 1-
 
Engenharia de Sofware

Desenvolvimento de Software: Engenharia de Software + Programacao + Banco de dados

	- Cultura da empresa
	- Categoria de software


Engenharia de software eh um conceito antigo que veio para melhorar a parte de processamento de dados


Passado: programador solitario		Atual: Equipe TI multidisciplinar, auto-organizada e comprometida


* Hoje procuram desenvolvedores Fullstack (conhecer desde o back ate o front)


Questoes que sao abordados e tentam minimizar Engenharia de Software:

Pq leva tanto tempo?

Pq os cutos de desenvolvimento sao tao altos?

Pq nao podemos achar todos os erros antes de entregar o software aos clientes?

Pq gastamos tanto tempo e esforco mantendo programas existentes?


Software eh desenvolvido e nao fabricado, ou seja eh gerado levando em consideracao as particularidades de cada projeto, oq acaba respondendo algumas das perguntas acima.

Software nao se desgasta, mas apesar da tendencia de utilizacao de componentes, a maioria continua sendo construida sob encomenda.

Software atualmente custa mais do q Hardware, justamente por ser feito sob medida para cada projeto.

Projetos de softaware sao mudados constantemente, por isso eh praticamente impossivel estimar tempo q vai demorar e quanto vai custar o desenvolvimento. 

Nao se esconde os erros, mas sao definidos onde e oq sera testado e sao feitos prioridades para teste de funcionamento.

Muitas vezes softwares antigos continuam passando por manutencao principalmente devido a grandes empresas, bancos e afins, q tem um sistema mt grande rodando em cima de algo ja antigo, mas mudar seria mt trabalhoso.


Software:

Programas de computadores q quando executados fornecem as carac, funcoes e desempenho desejados  ===> Voltado mais para programacao

Estrutura de dados q permitem aos programas manipular adequadamente a informacao ===> mais voltado para estrutura de dados e banco de dados

Documentos q descrevem a operacao e o uso dos programas  ===> mais ligado a Engenharia de Software



Software eh um conjunto de dados, arquivos de configuracao e documentacao necessarios para q o software funcione corretamente.
 

Toda vez que uma mudanca eh implementada, aumentam as chances de aparecer erros.



Tipos de Softwares:

Software de Sistemas: 

	Softwares utilizados por outros softwares.  Compiladores, SO, componentes

Software de Aplicacao
	
	Softwares que tem como objetivo resolver um problema especifico de negocio.	Folha de pagamento, gestao de info

Software de Tempo real
	
	Softwares de app, mas q monitoram, analisam e controlam eventos em tempo real.	Sistema do metro, sistema de aviacao

Cientifico e de Engenharia

	Antigamente so processavam numeros.	sistema de astronomia, analise automotiva de tensao a dinamica orbital do onivus espacial.
	Atualmente sao apoiados por computadores, simulacao de sistemas e outras aplicacoes interativas.

Software Embutido

	residem dentro de outro produto, sistema ou memoria ROM. Controle de teclado forno microondas, gasolina do automovel

Sofware para linha de produtos

	antendem uma necessidade especifica para ser utilizado por varios usuarios diferentes.	Jogos, planilhas, editores de texto.

Software Para Web

	Para serem disponibilizados em browser.	E-commerce, e-learning

Software para IA

	algoritmos nao numericos para resolver problemas complexos q n sao passiveis de computacao ou analise direta.	Robotica, sistemas elspecialistas, sistema de reconhecimento de padrao, redes neurais.

Computacao Ubiqua

	permitem conectividade entre varios dispositivos atraves de diferentes tipos de redes atraves da computacao distribuida.	Acesso info pelo cel, TV digital

Software Aberto

	software de aplicacao, com codigo fonte aberto.	 SO, sistemas de banco de dados.



Perguntas:

oq sao softwares legados? R:Softwares q apesar de continuarem sendo utilizados, ja estao ultrapassados.

qual a relacao de softwares legados com o desenvolvimento de software? R:Mts vezes os softwares novos tem q ter integracao com o softwares legado.

quais sao os possiveis problemas de um software legados? R: Perder manutencao, ficar ultrapassado.



Problemas: 

	- Digitou um comando incorreto de uma letra, o aviao descaralhou.
	- Codigo de uma letra para Cali eh o msm q Bogota
	
	R: - Padronizar o banco de dados
	   - Confirmacao do destino	


=============================================================================================================================================================================================================================

Aula 2 -


Sommerville - 

Engenharia: Engenheiros fazem as coisas funcionarem, aplicam teorias, ferramentas e metodos onde for apropriado ou criam se necessario.

Todos os aspectos da producao de software: Gerenciamento de projeto de software e o desenvolvimento de ferramentas, metodos que apoiem a producao de software.


Engenharia de Software:

	Qualidade: Eh uma camada q suporta a engenharia de sofware, tendo como foco um sofware total com qualidade
	Processo: Eh um conjunto de atividades e resiltados associados q geram um produto de software. Ha quatro atividades de processo fundamentais comins a todos os processos de software
	Metodos: Sao abordagens para o desenvolvimento de software q incluem: modelos, notacoes, regras, recomendacoes e diretrizes, Eh a camada q fornece a tecnica de como fazer para construir sofwares, ou seja a maneira de conduzir um processo
	Ferramentas: Eh a camada q proporciona apoio automatizado aos processos e metodos, como por exemplo as ferramentas CASE


====================================================================================================================================================================================================================================================================

Aula 3 - 

Modelos de processo tradicionais: Como sera desenvolvido o software

	- Cascata
	- Incremental
	- Espiral 
	- RAD
 
Escolhido na base de :

	- Natureza do projeto e app (tipo de software)
	- Metodos e ferramentas a serem utilizados
	- Controles e nos produtos intermediarios e finais a serem entregues


MODELO SEQUENCIAL LINEAR (Cascata):

Fase 1: Engenharia de Sistemas: Envolve cole de requisitos em nivel do sistema, com uma pequena quantidade de projeto e analise de alto nivel;

	Defini-se: 

 		- escopo do sistema; 
 		- avaliação do sistema atual em uso, se existir; 
 		- definição de metas e objetivos; 
 		- viabilidade de desenvolvimento do sistema; 
 		- os custos e prazos; 
 		- escolha da metodologia de desenvolvimento; 
 		- elementos de software e hardware que serão necessários.

Fase 2: Analise: O processo de coleta dos requisitos eh inensificado e concentrado especificamente no software

	Realiza-se:
		
		- modelagem independente de tecnologias e ferramentas;
		- definição de informações e funções do sistema;
		- especificação do critério de aceitação

Fase 3 : Projeto: Traduz os requisitos para uma representacao de sofware, q pode ser avaliada quanto a qualidade, antes que a codificacao tenha inicio.

	Envolve:
		
		- definição da arquitetura de software;
		- estrutura de dados;
		- detalhamento dos procedimentos;
		- Representações da interface.

Fase 4: Codificacao: Traducao do projeto para uma linguagem de programacao.

Fase 5:  Testes: Realiza os processos de testes focando na logica interna e externa do sistema e se ta funcionando direito, de acordo com oq foi pedido.

	
Problemas no sequencial Linear:
	
	- Os projetos nem sempre seguem o fluxo sequencial que o modelo propõe. Algumas iterações ocorrem trazendo problemas;
	- É difícil acomodar incertezas do projeto no seu início;
	- O produto somente é visível no final de todo o ciclo;
	- Não prevê a utilização de pacotes pré-existentes.	

Aplicacoes do modelo sequencial Linear:

	- Projetos com requisitos bem compreendidos;
	- Projetos com processos pequenos que geram poucas chances de falhas nos requisitos, para que não seja necessário retornar ao início sempre que houver uma falhas. 



MODELO PROTOTIPACAO: Parecido com o modelo sequencial porem, com protipos para o cliente, antes de realmente fazer o projeto final.

	Usa- se geralmente:

		- Quando não há identificação dos requisitos de entradas, processamento ou saída;
		- Quando o desenvolvedor está inseguro da eficiência do algoritmo, da interação humanocomputador ou da adaptabilidade com outros sistemas.

	Problemas:
		
		- O cliente acha que protótipo é produto;
		- O projetista incorpora soluções inadequadas;
		- A administração do ciclo de prototipação pode ser complicada

MODELO INCREMENTAL: "Dividir para conquistar". *Regra de ouro: entregar primeiro oq agrega mais valor de negocio.
	
	Caracteristicas:
			
		- Divide o desenvolvimento de software em incrementos (que são como módulos do sistema) que “independem” uns dos outros;
		- Combina elementos do modelo sequencial linear (cascata) com a filosofia iterativa do modelo de prototipação;
		- Cada sequência linear produz um incremento do software. O processo se repete até que um produto completo seja produzido;
		- O incremento inicial é frequentemente chamado de núcleo de produto. Isto quer dizer que os requisitos básicos são satisfeitos.


	Geralmente utilizado quando: 

		- Para softwares nos quais as funções possam ser divididas em módulos;
		- Para softwares que frequentemente alteram requisitos;
		- Quando usuário necessita utilizar uma parte do produto antes do final de um projeto;
		- Quando há prazo de entrega que não pode ser modificado.


Exercicios: 

1 -
 - Cadastro de cliente
 - Registro de ponto
 - Consulta e gera relatorio

2 
 - Sim, Incremental e prototipacao.

3 -

 - Site de vendas
 - Rede social
 - Sistema de dashboard

Dificil: 
	- Sistema integrado de gestao
	- Modulo de pouso do foguete

4 - 

a- Cascata
b- Incremental
c- Prototipagem + Incremental
d- Incremental

5 - 

a- Definir prioridades para a implementacao, testar e entregar.
b- Seria discutido a ordem de prioridade, e entregar os modulos de acordo com tal e aguardando as validacoes.


6 - 

a- Incremental



MODELO RUP (Rational Unified Process): 

	- O RUP é um produto de processo
	- Desenvolve software iterativamente;
	- Gerencia requisitos;
	- Utiliza arquitetura baseada em componentes;
	- Modela visualmente o software;
	- Verifica continuamente a qualidade do software
	- Controla mudanças de software;

	
================================================================================================================================================================================================================================================

Aula 4 - 


MODELO ESPIRAL: 

	Caracteristicas: 
		
		- Engloba a natureza iterativa do modelo de Prototipação com aspectos sistemáticos e controlados do modelo Linear Sequencial (Cascata);
		- Fornece potencial para o desenvolvimento rápido de versões incrementais do software;
		- Durante as primeiras iterações, pode ser um modelo em papel ou protótipo;
		- Durante as últimas iterações, são produzidas versões cada vez mais completas
		- Cada loop representa uma fase do processo de software. Dessa forma o loop mais interno pode estar relacionado à viabilidade do sistema; o próximo loop, a definição de requisitos; o próximo ao projeto e assim por diante.
	 
	
	Fases: 
		
		- Comunicação com o cliente: Tarefas necessárias para estabelecer efetiva comunicação entre o desenvolvedor e o cliente.
		
		- Planejamento: Definir recursos, prazps e putras infos relacionadas ao projeto.

		- Analise de risco: Avaliar os riscos, tanto tecnicos como gerenciais.

		- Engenharia: Tarefas necessarias para construir uma ou mais representacoes da aplicacao

		- Construcao e Liberacao: Taredas para construir, testar, instalar e fornecer o suporte ao usuario.

		- Avaliacao pelo Cliente: Obter o feedback do cliente com base na avaliacao do software durante a fase de engenharia e implementado na fase de construcao e liberacao.
		
		
Utilizar quando:
	
	- Softwares de grande porte
	- Softwares q possuem riscos no seu desenvolvimento.

Problemas: 
	
	- Pode ser dificil convencer o clente que a abordagem "evolutiva" eh contrololavel;

	- Exige grande experiencia na avaliacao de riscos e depende dessa competencia para obter sucesso;



MODELO RAD:

	Caracteristicas:

		- É um modelo de processo de desenvolvimento de software incremental que enfatiza um ciclo de desenvolvimento extremamente curto (em média de 60 a 90 dias).

		- É uma adaptação “de alta velocidade” do modelo sequencial linear, mas com utilização de componentes

	Fases: 
	
	- Comunicacao: Tem como objetivo entender os problemas de negócio e as características de informação que o software precisa acomodar.

	- Planejamento: Tem como objetivo planejar como várias equipes de software podem trabalhar em paralelo em diferentes funções do sistema.

	- Modelagem: 
		
		- Negocios: 
			
			- Que informação dirige o processo de negócio?
			
			- Que informação é gerada?
	
			- Quem a gera?

			- Para onde vai a informação?

			- Quem a processa?

		- Dados: 
			
			- O fluxo de informação definido na fase anterior é refinado em um conjunto de objetos de dados, que são necessários para suportar o negócio. São identificados os atributos de cada objeto e o relacionamento entre eles. 
			
		- Processo:

			- Os objetos de dados definidos na fase de modelagem de dados são transformados para se obter o fluxo de informação necessário para implementar uma função do negócio.

		- Construcao: 
	
			- reutiliza ferramentas de programacao ja disponiveis, ao inves de fazer tudo do zero.

		- Implantacao: 
		
			- Integrar e implantar o sistema.


Utilizar quando: 	

	- As restrições de tempo impostas devem ter um mensurável (em média de 60-90 dias)
	
	- Se a aplicação de software pode ser modularizada de forma que cada função principal possa ser completada em menos de 3 meses;

	- Cada função principal pode ser tratada por uma equipe distinta e depois integrada para formar um todo.

Problemas: 

	- Para projetos grandes, mas mensuráveis, o RAD exige recursos humanos suficientes para criar um número adequado de equipes;
	
	- Exige comprometimento da equipe de desenvolvimento e clientes com as atividades continuamente rápidas;

	- Se o sistema não puder ser adequadamente modularizado, a construção dos componentes pode ser problemática;

	- Se for treta demais, nao compensa.




DESENVOLVIMENTO AGIL

	- Manifesto agil:
			
		- Interecao entre pessoas mais que processos e ferramentas.
		- Software em funcionamento mais que documentocao abrangente
		- Colaboracao com o cliente mais que negociacao de contratos
		- Responder a mudancas mais que seguir um plano 

	
	- Desenvolver software valorizando adaptabilidade, transparencia, simplicidade e unidade
	- Valores ageis sao estabelecidos um conjunto de principios
	- Praticas Ageis: Conjunto de atividades para implementar os principios e valores ageis

